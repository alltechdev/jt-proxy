name: Daily Worker Rotation

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  rotate-worker:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Get current worker name
        id: old_worker
        run: |
          # Extract current worker name from wrangler.toml
          OLD_NAME=$(grep '^name = ' wrangler.toml | sed 's/name = "\(.*\)"/\1/')
          echo "old_name=$OLD_NAME" >> "$GITHUB_OUTPUT"
          echo "Current worker name: $OLD_NAME"

      - name: Generate random worker name
        id: random
        run: |
          # Generate simple unique name
          NAME=$(date +%s | tail -c 9)
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "Generated name: $NAME"

      - name: Update wrangler.toml
        run: |
          # Update worker name
          sed -i "s/name = .*/name = \"${{ steps.random.outputs.name }}\"/" wrangler.toml
          echo "Updated wrangler.toml:"
          cat wrangler.toml

      - name: Deploy worker
        run: |
          # Deploy using environment variable for authentication
          echo "Deploying worker with name: ${{ steps.random.outputs.name }}"
          if ! npx wrangler deploy; then
            echo "Deployment failed"
            exit 1
          fi
          echo "Deployment successful"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Delete old worker
        run: |
          # Delete the previous worker using Cloudflare API
          OLD_WORKER="${{ steps.old_worker.outputs.old_name }}"
          if [ -n "$OLD_WORKER" ] && [ "$OLD_WORKER" != "${{ steps.random.outputs.name }}" ]; then
            echo "Deleting old worker: $OLD_WORKER"

            # Get the account ID from wrangler whoami output
            WHOAMI_OUTPUT=$(npx wrangler whoami 2>&1)
            echo "Wrangler whoami output:"
            echo "$WHOAMI_OUTPUT"

            # Extract account ID - it's in format "Account ID: <id>"
            ACCOUNT_ID=$(echo "$WHOAMI_OUTPUT" | grep -oP "Account ID:\s*\K[a-f0-9]+")

            if [ -n "$ACCOUNT_ID" ]; then
              echo "Using Account ID: $ACCOUNT_ID"
              # Use Cloudflare API to delete the worker
              RESPONSE=$(curl -X DELETE \
                "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/workers/scripts/$OLD_WORKER" \
                -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                -H "Content-Type: application/json" \
                -w "\n%{http_code}" -s)

              HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
              BODY=$(echo "$RESPONSE" | head -n-1)

              if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "204" ]; then
                echo "Successfully deleted old worker: $OLD_WORKER"
              else
                echo "Warning: Failed to delete old worker: $OLD_WORKER"
                echo "HTTP Status: $HTTP_CODE"
                echo "Response: $BODY"
                echo "This is non-fatal, continuing..."
              fi
            else
              echo "Could not determine account ID from wrangler whoami, skipping deletion"
            fi
          else
            echo "No old worker to delete or same as new worker"
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Update files and push
        run: |
          # Create current URL file
          WORKER_URL="https://${{ steps.random.outputs.name }}.abesternheim.workers.dev"
          echo "# Current Worker URL" > CURRENT_URL.md
          echo "**Today's URL:** $WORKER_URL" >> CURRENT_URL.md
          echo "**Deployed:** $(date -u)" >> CURRENT_URL.md

          # Update README using simple sed replacement
          sed -i "s|\*\*Today's active URL:\*\*.*|\*\*Today's active URL:\*\* [${{ steps.random.outputs.name }}](https://${{ steps.random.outputs.name }}.abesternheim.workers.dev)|" README.md

          # Commit and push
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add wrangler.toml CURRENT_URL.md README.md

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Daily rotation: ${{ steps.random.outputs.name }}"
            echo "Changes committed successfully"

            if ! git push; then
              echo "Failed to push changes"
              exit 1
            fi
            echo "Changes pushed successfully"
          fi